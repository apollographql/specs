"""
Indicates that a position is semantically non null: it is only null if there is a matching error in the `errors` array.
In all other cases, the position is non-null.

Tools doing code generation may use this information to generate the position as non-null:

```graphql
type User {
    # email is semantically non-null and can be generated as non-null by error-handling clients.
    email: String @semanticNonNull
}
```

The `field` argument is the name of the field if `@semanticNonNull` is applied to an object type extension:

```graphql
# extend the base schema to make User.email semantically non-null.
extend type User @semanticNonNull(field: "email")
```

`field` is used for client applications that do not control the base schema and must use type extensions.
When used on a field definition, `field` must be null.

The `level` argument indicates what level is semantically non null in case of lists:

```graphql
type User {
    # friends is semantically non null
    friends: [User] @semanticNonNull # same as @semanticNonNull(level: 0)

    # friends[0], ... are semantically non null
    friends: [User] @semanticNonNull(level: 1)

    # friends, friends[0], ... are all semantically non null
    friends: [User] @semanticNonNull(level: 0) @semanticNonNull(level: 1)
}
```

`level` is zero indexed.
Passing a negative level or a level greater than the list dimension is an error.

"""
directive @semanticNonNull(field: String = null, level: Int = 0) repeatable on FIELD_DEFINITION | OBJECT

"""
Indicates how clients should handle errors on a given position.

When used on the schema definition, `@catch` applies to every position that can return an error.

The `level` argument indicates where to catch errors in case of lists:

```graphql
{
    user {
        # friends catches errors
        friends @catch { name } # same as @catch(level:0)

        # friends[0], ... catch errors
        friends @catch(level: 0) { name }

        # friends, friends[0], ... all catch errors
        friends @catch(level: 0) @catch(level: 1) { name }
    }
}
```

`level` is zero indexed.
Passing a negative level or a level greater than the list dimension is an error.

See `CatchTo` for more details.
"""
directive @catch(to: CatchTo! = RESULT, level: Int = 0) repeatable on FIELD | SCHEMA

enum CatchTo {
    """
    Catch the error and map the position to a result type that can contain either
    a value or an error.
    """
    RESULT,
    """
    Catch the error and map the position to a nullable type that will be null
    in the case of error.
    This does not allow to distinguish between semantic null and error null but
    can be simpler in some cases.
    """
    NULL,
    """
    Throw the error.
    Parent positions can recover using `RESULT` or `NULL`.
    If no parent position recovers, the parsing stops.
    """
    THROW
}

"""
Never throw on field errors.

This is used for backward compatibility for clients where this was the default behaviour.
"""
directive @ignoreErrors on QUERY | MUTATION | SUBSCRIPTION
